import json
import os
import random
from contextlib import asynccontextmanager
from http import HTTPStatus
from pathlib import Path
from typing import Dict, List, Optional, Set, Iterable

from fastapi import FastAPI, Request, Response

from telegram import (
    Update,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)

# =======================
#  –î–ê–ù–ù–´–ï
# =======================

kpop_groups: Dict[str, List[str]] = {
    "twice": ["Momo", "Jihyo", "Nayeon", "Sana", "Dahyun", "Jeongyeon", "Mina", "Chaeyoung", "Tzuyu"],
    "illit": ["Yunah", "Minju", "Wonhee", "Moka", "Iroha"],
    "i-dle": ["Soyeon", "Minnie", "Miyeon", "Shuhua", "Yuqi"],
    "all day project": ["Youngseo", "Annie", "Bailey", "Tarzzan", "Woochan"],
    "le sserafim": ["Chaewon", "Sakura", "Kazuha", "Eunchae", "Yunjin"],
    "katseye": ["Lara", "Megan", "Sophia", "Yoonchae", "Manon", "Daniela"],
    "itzy": ["Yeji", "Ryujin", "Chaeryeong", "Lia", "Yuna"],
    "red velvet": ["Joy", "Seulgi", "Yeri", "Irene", "Wendy"],
    "njz": ["Minji", "Hanni", "Danielle", "Haerin", "Hyein"],
    "blackpink": ["Lisa", "Jisoo", "Jennie", "Rose"],
    "aespa": ["Giselle", "Winter", "Ningning", "Karina"],
    "baby monster": ["Ruka", "Pharita", "Chiquita", "Rami", "Asa", "Ahyeon", "Rora"],
    "kiss of life": ["Natty", "Julie", "Haneul", "Belle"],
}

AI_GROUPS_FILE = "top50_groups.json"


def load_ai_kpop_groups(path: str = AI_GROUPS_FILE) -> Dict[str, List[str]]:
    file = Path(path)
    if file.exists():
        with file.open("r", encoding="utf-8") as f:
            return json.load(f)
    return {}


ai_kpop_groups: Dict[str, List[str]] = load_ai_kpop_groups()

correct_grnames: Dict[str, str] = {
    "twice": "Twice",
    "illit": "ILLIT",
    "i-dle": "I-dle",
    "all day project": "All Day Project",
    "le sserafim": "Le Sserafim",
    "katseye": "Katseye",
    "itzy": "Itzy",
    "red velvet": "Red Velvet",
    "njz": "NJZ",
    "blackpink": "BLACKPINK",
    "aespa": "Aespa",
    "baby monster": "Baby Monster",
    "kiss of life": "Kiss of Life",
}

# –ë—ã—Å—Ç—Ä—ã–µ —Å–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è "–∫—Ä–∞—Å–∏–≤–æ–≥–æ" –Ω–∞–∑–≤–∞–Ω–∏—è -> –∫–ª—é—á –≥—Ä—É–ø–ø—ã
PRETTY_TO_KEY: Dict[str, str] = {v.lower(): k for k, v in correct_grnames.items()}

# =======================
#  –£–¢–ò–õ–ò–¢–´
# =======================

def dictionary_to_list(dictionary: Dict[str, List[str]]) -> List[str]:
    all_values: List[str] = []
    for _k, value in dictionary.items():
        all_values.extend(value)
    return all_values

def norm_group_key(s: str) -> str:
    """Normalize user-provided group names.

    Besides trimming leading/trailing whitespace and lowercasing, collapse
    any sequence of internal whitespace into a single space so that inputs
    like ``"Red   Velvet"`` match stored keys such as ``"red velvet"``.
    """
    return " ".join(s.lower().split())

def menu_keyboard() -> InlineKeyboardMarkup:
    kb = [
        [InlineKeyboardButton("1. –£–≥–∞–¥–∞–π –≥—Ä—É–ø–ø—É", callback_data="menu_play")],
        [InlineKeyboardButton("2. –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –≥—Ä—É–ø–ø—ã", callback_data="menu_show_all")],
        [InlineKeyboardButton("3. –ù–∞–π—Ç–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞", callback_data="menu_find_member")],
        [InlineKeyboardButton("4. –†–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è", callback_data="menu_learn")],
        [InlineKeyboardButton("5. –£–≥–∞–¥–∞–π –≥—Ä—É–ø–ø—É (–ò–ò)", callback_data="menu_play_adv")],
    ]
    return InlineKeyboardMarkup(kb)

def back_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu_back")]])

def in_game_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([[InlineKeyboardButton("üèÅ –ü—Ä–µ—Ä–≤–∞—Ç—å –∏–≥—Ä—É", callback_data="menu_back")]])

# ---- callback "–ø—Ä–µ—Ñ–∏–∫—Å—ã" –¥–ª—è —Ä–µ–∂–∏–º–∞ –æ–±—É—á–µ–Ω–∏—è
CB_LEARN_PICK = "learn_pick:"       # –≤—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã
CB_LEARN_TRAIN = "learn_train:"     # –ø–µ—Ä–µ–π—Ç–∏ –∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ –ø–æ –≥—Ä—É–ø–ø–µ
CB_LEARN_MENU = "menu_learn"        # –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –æ–±—É—á–µ–Ω–∏—è
CB_LEARN_EXIT = "learn_exit"        # –≤—ã–π—Ç–∏ –∏–∑ –æ–±—É—á–µ–Ω–∏—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

def groups_keyboard() -> InlineKeyboardMarkup:
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –≥—Ä—É–ø–ø –¥–ª—è –æ–±—É—á–µ–Ω–∏—è (2 –≤ —Ä—è–¥)
    buttons: List[List[InlineKeyboardButton]] = []
    row: List[InlineKeyboardButton] = []
    for key in correct_grnames.keys():
        title = correct_grnames[key]
        row.append(InlineKeyboardButton(title, callback_data=f"{CB_LEARN_PICK}{key}"))
        if len(row) == 2:
            buttons.append(row)
            row = []
    if row:
        buttons.append(row)
    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    buttons.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu_back")])
    return InlineKeyboardMarkup(buttons)

def learn_after_list_keyboard(group_key: str) -> InlineKeyboardMarkup:
    # –ü–æ—Å–ª–µ –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ ‚Äî –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚ñ∂Ô∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å —ç—Ç—É –≥—Ä—É–ø–ø—É", callback_data=f"{CB_LEARN_TRAIN}{group_key}")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –≥—Ä—É–ø–ø—É", callback_data=CB_LEARN_MENU)],
        [InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu_back")],
    ])

def learn_in_session_keyboard() -> InlineKeyboardMarkup:
    # –í–æ –≤—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ ‚Äî —Ç–æ–ª—å–∫–æ –≤—ã—Ö–æ–¥/–Ω–∞–∑–∞–¥
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ", callback_data=CB_LEARN_MENU)],
        [InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu_back")],
    ])

# =======================
#  –°–û–°–¢–û–Ø–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
# =======================
# user_data —Å—Ö–µ–º–∞:
# {
#   "mode": "idle" | "find" | "game" | "learn_menu" | "learn_train",
#   "game": {
#       "members": list[str],
#       "index": int,
#       "score": int,
#       "current_member": str | None
#   },
#   "learn": {
#       "group_key": str,
#       "to_learn": list[str],
#       "known": set[str],
#       "current": str | None
#   }
# }

def reset_state(context: ContextTypes.DEFAULT_TYPE) -> None:
    context.user_data.clear()
    context.user_data["mode"] = "idle"

# ----- –ò–≥—Ä–∞ ¬´–£–≥–∞–¥–∞–π –≥—Ä—É–ø–ø—É¬ª

def start_game(context: ContextTypes.DEFAULT_TYPE) -> None:
    all_members = dictionary_to_list(kpop_groups)
    random_members = random.sample(all_members, 10)
    context.user_data["mode"] = "game"
    context.user_data["game"] = {
        "members": random_members,
        "index": 0,
        "score": 0,
        "current_member": None,
    }


def start_ai_game(context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∂–∏–º –∏–≥—Ä—ã —Å –ò–ò."""
    start_game(context)
    context.user_data["mode"] = "ai_game"

def next_question(context: ContextTypes.DEFAULT_TYPE) -> Optional[str]:
    g = context.user_data.get("game", {})
    idx: int = g.get("index", 0)
    members: List[str] = g.get("members", [])
    if idx >= 10:
        return None
    member = members[idx]
    g["current_member"] = member
    context.user_data["game"] = g
    return member

def finish_text(context: ContextTypes.DEFAULT_TYPE) -> str:
    g = context.user_data.get("game", {})
    score = g.get("score", 0)
    return f"–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –¢—ã —É–≥–∞–¥–∞–ª {score} –∏–∑ 10."

# ----- –†–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è

def start_learn_session(context: ContextTypes.DEFAULT_TYPE, group_key: str) -> None:
    members = list(kpop_groups[group_key])
    random.shuffle(members)  # —Å–ª—É—á–∞–π–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫
    context.user_data["mode"] = "learn_train"
    context.user_data["learn"] = {
        "group_key": group_key,
        "to_learn": members,
        "known": set(),    # —É–∂–µ –≤–µ—Ä–Ω–æ –Ω–∞–∑–≤–∞–Ω–Ω—ã–µ –∏–º–µ–Ω–∞ (–≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ)
        "current": None,
    }

def _alpha_positions(s: str) -> List[int]:
    return [i for i, ch in enumerate(s) if ch.isalpha()]

def _matches_with_reveals(candidate: str, target: str, reveals: Set[int]) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ –∏–º—è candidate –ø–æ–¥ –º–∞—Å–∫—É target,
    –≥–¥–µ –≤ –ø–æ–∑–∏—Ü–∏—è—Ö –∏–∑ reveals –±—É–∫–≤—ã –¥–æ–ª–∂–Ω—ã —Å–æ–≤–ø–∞—Å—Ç—å (—Ä–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ),
    –≤ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏—è—Ö:
      - –µ—Å–ª–∏ –≤ target –±—É–∫–≤–∞ -> –≤ candidate —Ç–æ–∂–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±—É–∫–≤–∞ (–ª—é–±–∞—è),
      - –µ—Å–ª–∏ –≤ target –Ω–µ –±—É–∫–≤–∞ -> —Å–∏–º–≤–æ–ª—ã –¥–æ–ª–∂–Ω—ã —Å–æ–≤–ø–∞—Å—Ç—å 1-–≤-1.
    –î–ª–∏–Ω—ã —Å—Ç—Ä–æ–∫ –¥–æ–ª–∂–Ω—ã —Å–æ–≤–ø–∞–¥–∞—Ç—å.
    """
    if len(candidate) != len(target):
        return False
    for i, t_ch in enumerate(target):
        c_ch = candidate[i]
        if t_ch.isalpha():
            if i in reveals:
                if c_ch.lower() != t_ch.lower():
                    return False
            else:
                if not c_ch.isalpha():
                    return False
        else:
            if c_ch != t_ch:
                return False
    return True

def _build_mask(target: str, reveals: Set[int]) -> str:
    out = []
    for i, ch in enumerate(target):
        if ch.isalpha() and i not in reveals:
            out.append("*")
        else:
            out.append(ch)
    return "".join(out)

def _unique_with_reveals(group: Iterable[str], target: str, reveals: Set[int]) -> bool:
    """–ï—Å—Ç—å –ª–∏ –≤ –≥—Ä—É–ø–ø–µ —Ä–æ–≤–Ω–æ –æ–¥–∏–Ω –∫–∞–Ω–¥–∏–¥–∞—Ç, —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—â–∏–π –∑–∞–¥–∞–Ω–Ω—ã–º –æ—Ç–∫—Ä—ã—Ç—ã–º –ø–æ–∑–∏—Ü–∏—è–º?"""
    cnt = 0
    for cand in group:
        if _matches_with_reveals(cand, target, reveals):
            cnt += 1
            if cnt > 1:
                return False
    return cnt == 1

def make_unique_mask_for_group_member(name: str, group_members: List[str]) -> str:
    """
    –î–µ–ª–∞–µ—Ç –º–∞—Å–∫—É –¥–ª—è 'name' —Ç–∞–∫, —á—Ç–æ–±—ã:
      - —Å–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è —Å 1 –æ—Ç–∫—Ä—ã—Ç–æ–π –±—É–∫–≤–æ–π (—Å–ª—É—á–∞–π–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è);
      - –µ—Å–ª–∏ –ø–æ –æ–¥–Ω–æ–π –±—É–∫–≤–µ –æ—Å—Ç–∞—ë—Ç—Å—è >1 –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –≤–Ω—É—Ç—Ä–∏ –≥—Ä—É–ø–ø—ã ‚Äî –ø–æ–¥–±–∏—Ä–∞–µ–º –≤—Ç–æ—Ä—É—é –ø–æ–∑–∏—Ü–∏—é,
        –¥–æ–±–∏–≤–∞—è—Å—å —Ä–æ–≤–Ω–æ –æ–¥–Ω–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞; –ø–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤—Ç–æ—Ä—ã–µ –ø–æ–∑–∏—Ü–∏–∏.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É-–º–∞—Å–∫—É (–∑–≤—ë–∑–¥–æ—á–∫–∏ –∏ –æ—Ç–∫—Ä—ã—Ç—ã–µ –±—É–∫–≤—ã), –ù–ï –º–µ–Ω—è–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä —Å–∏–º–≤–æ–ª–æ–≤.
    """
    alpha_idx = _alpha_positions(name)
    if not alpha_idx:
        return name  # –Ω–∏—á–µ–≥–æ –º–∞—Å–∫–∏—Ä–æ–≤–∞—Ç—å

    # —Å–ª—É—á–∞–π–Ω–∞—è –ø–µ—Ä–≤–∞—è –ø–æ–∑–∏—Ü–∏—è
    first = random.choice(alpha_idx)
    one_reveal = {first}

    # –µ—Å–ª–∏ —É–∂–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º –æ–¥–Ω—É –±—É–∫–≤—É
    if _unique_with_reveals(group_members, name, one_reveal):
        return _build_mask(name, one_reveal)

    # –∏–Ω–∞—á–µ –ø–æ–¥–±–∏—Ä–∞–µ–º –≤—Ç–æ—Ä—É—é –±—É–∫–≤—É
    remaining_positions = [i for i in alpha_idx if i != first]
    random.shuffle(remaining_positions)

    for second in remaining_positions:
        reveals = {first, second}
        if _unique_with_reveals(group_members, name, reveals):
            return _build_mask(name, reveals)

    # –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏ —Å—é–¥–∞ –Ω–µ –ø–æ–ø–∞–¥—ë–º (–∏–º–µ–Ω–∞ –≤ –≥—Ä—É–ø–ø–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã),
    # –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π ‚Äî —Ä–∞—Å–∫—Ä–æ–µ–º –¥–≤–µ –ø–µ—Ä–≤—ã–µ –±—É–∫–≤—ã-–∞–ª—Ñ –ø–æ–∑–∏—Ü–∏–∏.
    fallback = {alpha_idx[0]}
    if len(alpha_idx) > 1:
        fallback.add(alpha_idx[1])
    return _build_mask(name, fallback)

def pick_next_to_guess(context: ContextTypes.DEFAULT_TYPE) -> Optional[str]:
    data = context.user_data.get("learn", {})
    to_learn: List[str] = data.get("to_learn", [])
    known: set[str] = data.get("known", set())  # type: ignore
    remaining = [m for m in to_learn if m.lower() not in known]
    if not remaining:
        return None
    member = random.choice(remaining)
    data["current"] = member
    context.user_data["learn"] = data
    return member

# =======================
#  –•–ï–ù–î–õ–ï–†–´ PTB
# =======================

async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    reset_state(context)
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ K-pop –∏–≥—Ä—É!! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=menu_keyboard(),
    )

async def on_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    data = query.data

    # --- –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é
    if data == "menu_back":
        reset_state(context)
        await query.edit_message_text("–ú–µ–Ω—é:", reply_markup=menu_keyboard())
        return

    # --- –ò–≥—Ä–∞ ¬´–£–≥–∞–¥–∞–π –≥—Ä—É–ø–ø—É¬ª
    if data == "menu_play":
        start_game(context)
        member = next_question(context)
        if member is None:
            await query.edit_message_text(finish_text(context), reply_markup=back_keyboard())
            return
        await query.edit_message_text(
            f"–ö –∫–∞–∫–æ–π –≥—Ä—É–ø–ø–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è: {member}?\n\n"
            "–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã.",
            reply_markup=in_game_keyboard(),
            parse_mode="Markdown",
        )
        return

    if data == "menu_play_adv":
        start_ai_game(context)
        member = next_question(context)
        if member is None:
            await query.edit_message_text(finish_text(context), reply_markup=back_keyboard())
            return
        await query.edit_message_text(
            f"–ö –∫–∞–∫–æ–π –≥—Ä—É–ø–ø–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è: {member}?\n\n",
            "–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã.",
            reply_markup=in_game_keyboard(),
            parse_mode="Markdown",
        )
        return

    # --- –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –≥—Ä—É–ø–ø—ã
    if data == "menu_show_all":
        lines: List[str] = []
        for key, members in kpop_groups.items():
            line = f"*{correct_grnames[key]}*: {', '.join(members)}"
            lines.append(line)
        text = "–í—Å–µ –≥—Ä—É–ø–ø—ã:\n\n" + "\n".join(lines)
        await query.edit_message_text(text, reply_markup=back_keyboard(), parse_mode="Markdown")
        return

    # --- –ù–∞–π—Ç–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞
    if data == "menu_find_member":
        context.user_data["mode"] = "find"
        await query.edit_message_text(
            "–í–≤–µ–¥–∏—Ç–µ –∏–º—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ k-pop –≥—Ä—É–ø–ø—ã:",
            reply_markup=back_keyboard(),
            parse_mode="Markdown",
        )
        return

    # === –†–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è: –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã
    if data == CB_LEARN_MENU or data == "menu_learn":
        context.user_data["mode"] = "learn_menu"
        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ k-pop –≥—Ä—É–ø–ø—É –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:",
            reply_markup=groups_keyboard(),
        )
        return

    # === –†–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è: –≤—ã–±—Ä–∞–Ω–Ω–∞—è –≥—Ä—É–ø–ø–∞ ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ—Å—Ç–∞–≤ –∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è
    if data.startswith(CB_LEARN_PICK):
        group_key = data.split(":", 1)[1]
        if group_key not in kpop_groups:
            await query.edit_message_text("–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=groups_keyboard())
            return
        members = kpop_groups[group_key]
        lines = [f"{correct_grnames[group_key]}: {', '.join(members)}"]
        text = "–°–æ—Å—Ç–∞–≤ –≥—Ä—É–ø–ø—ã:\n\n" + "\n".join(lines)
        await query.edit_message_text(
            text,
            reply_markup=learn_after_list_keyboard(group_key),
        )
        return

    # === –†–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è: –Ω–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –ø–æ –≥—Ä—É–ø–ø–µ
    if data.startswith(CB_LEARN_TRAIN):
        group_key = data.split(":", 1)[1]
        if group_key not in kpop_groups:
            await query.edit_message_text("–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=groups_keyboard())
            return
        start_learn_session(context, group_key)
        member = pick_next_to_guess(context)
        if member is None:
            await query.edit_message_text(
                "–ö–∞–∂–µ—Ç—Å—è, –≤—ã —É–∂–µ –∑–Ω–∞–µ—Ç–µ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã!",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚¨ÖÔ∏è –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –≥—Ä—É–ø–ø—É", callback_data=CB_LEARN_MENU)],
                    [InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu_back")],
                ]),
            )
            return
        masked = make_unique_mask_for_group_member(member, kpop_groups[group_key])
        await query.edit_message_text(
            f"–ì—Ä—É–ø–ø–∞: {correct_grnames[group_key]}\n"
            f"–£–≥–∞–¥–∞–π—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞: <code>{masked}</code>\n\n"
            f"(–≤–≤–µ–¥–∏—Ç–µ –∏–º—è —Å–æ–æ–±—â–µ–Ω–∏–µ–º)",
            parse_mode="HTML",
            reply_markup=learn_in_session_keyboard(),
        )
        return

    # === –†–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è: —è–≤–Ω—ã–π –≤—ã—Ö–æ–¥
    if data == CB_LEARN_EXIT:
        reset_state(context)
        await query.edit_message_text("–ú–µ–Ω—é:", reply_markup=menu_keyboard())
        return

async def on_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    mode = context.user_data.get("mode", "idle")
    text = (update.message.text or "").strip()

    # --- –ù–∞–π—Ç–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞
    if mode == "find":
        member = text.title()
        for group_key, members in kpop_groups.items():
            if member in members:
                await update.message.reply_text(
                    f"{member} ‚Äî —É—á–∞—Å—Ç–Ω–∏–∫ –≥—Ä—É–ø–ø—ã *{correct_grnames[group_key]}*",
                    reply_markup=back_keyboard(),
                    parse_mode="Markdown"
                )
                break
        else:
            await update.message.reply_text("–¢–∞–∫–æ–π —É—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=back_keyboard())
        return

    # --- –ò–≥—Ä–∞ ¬´–£–≥–∞–¥–∞–π –≥—Ä—É–ø–ø—É¬ª
    if mode in ("game", "ai_game"):
        g = context.user_data.get("game", {})
        member = g.get("current_member")
        if member is None:
            member = next_question(context)
            if member is None:
                await update.message.reply_text(finish_text(context), reply_markup=back_keyboard())
                reset_state(context)
                return
            await update.message.reply_text(
                f"–ö –∫–∞–∫–æ–π –≥—Ä—É–ø–ø–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è: {member}?",
                reply_markup=in_game_keyboard(),
            )
            return

        # –î–æ–ø—É—Å–∫–∞–µ–º 2 —Ñ–æ—Ä–º—ã –≤–≤–æ–¥–∞: –∫–ª—é—á ("twice") –∏–ª–∏ –∫—Ä–∞—Å–∏–≤–æ–µ –∏–º—è ("Blackpink")
        answer_key = norm_group_key(text)
        is_correct = False

        if answer_key in kpop_groups and member in kpop_groups[answer_key]:
            is_correct = True
        else:
            mapped_key = PRETTY_TO_KEY.get(answer_key)
            if mapped_key and member in kpop_groups[mapped_key]:
                is_correct = True

        feedback = "–í–µ—Ä–Ω–æ!" if is_correct else "–ù–µ–≤–µ—Ä–Ω–æ!"
        if is_correct:
            g["score"] = g.get("score", 0) + 1
        g["index"] = g.get("index", 0) + 1
        context.user_data["game"] = g

        next_m = next_question(context)
        if next_m is None:
            await update.message.reply_text(
                f"{feedback}\n\n" + finish_text(context),
                reply_markup=back_keyboard(),
            )
            reset_state(context)
        else:
            await update.message.reply_text(
                f"{feedback}\n\n–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å:\n–ö –∫–∞–∫–æ–π –≥—Ä—É–ø–ø–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è: {next_m}?",
                reply_markup=in_game_keyboard(),
            )
        return

    # --- –†–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –æ—Ç–≤–µ—Ç—ã
    if mode == "learn_train":
        learn = context.user_data.get("learn", {})
        group_key: Optional[str] = learn.get("group_key")
        current: Optional[str] = learn.get("current")

        # –°—Ç—Ä–∞—Ö–æ–≤–∫–∞: –µ—Å–ª–∏ —Ç–µ–∫—É—â–µ–≥–æ –Ω–µ—Ç ‚Äî –≤—ã–±–∏—Ä–∞–µ–º
        if not current:
            current = pick_next_to_guess(context)
            if not current:
                title = correct_grnames.get(group_key or "", group_key or "")
                await update.message.reply_text(
                    f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —Å–º–æ–≥–ª–∏ –Ω–∞–∑–≤–∞—Ç—å –ø–æ –ø–∞–º—è—Ç–∏ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã {title}! üéâ",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üìö –£—á–∏—Ç—å –¥—Ä—É–≥—É—é –≥—Ä—É–ø–ø—É", callback_data=CB_LEARN_MENU)],
                        [InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu_back")],
                    ]),
                )
                reset_state(context)
                return

        answer = (text or "").strip().lower()
        correct = current.lower()

        known: set[str] = learn.get("known", set())  # type: ignore

        if answer == correct:
            known.add(correct)
            learn["known"] = known
            context.user_data["learn"] = learn
            feedback = "–í–µ—Ä–Ω–æ! ‚úÖ"
        else:
            feedback = f"–ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {current}"

        # –°–ª–µ–¥—É—é—â–∏–π –∫–∞–Ω–¥–∏–¥–∞—Ç —Å—Ä–µ–¥–∏ –Ω–µ–æ—Ç–≥–∞–¥–∞–Ω–Ω—ã—Ö
        next_member = pick_next_to_guess(context)
        title = correct_grnames.get(group_key or "", group_key or "")

        if next_member is None:
            await update.message.reply_text(
                f"{feedback}\n\n–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —Å–º–æ–≥–ª–∏ –Ω–∞–∑–≤–∞—Ç—å –ø–æ –ø–∞–º—è—Ç–∏ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã {title}! üéâ",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üìö –£—á–∏—Ç—å –¥—Ä—É–≥—É—é –≥—Ä—É–ø–ø—É", callback_data=CB_LEARN_MENU)],
                    [InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu_back")],
                ]),
            )
            reset_state(context)
            return

        masked = make_unique_mask_for_group_member(next_member, kpop_groups[group_key])  # type: ignore
        await update.message.reply_text(
            f"{feedback}\n\n–ì—Ä—É–ø–ø–∞: {title}\n"
            f"–°–ª–µ–¥—É—é—â–∏–π —É—á–∞—Å—Ç–Ω–∏–∫: <code>{masked}</code>",
            parse_mode="HTML",
            reply_markup=learn_in_session_keyboard(),
        )
        return

    # --- –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é
    await update.message.reply_text("–ú–µ–Ω—é:", reply_markup=menu_keyboard())

async def on_unknown(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.message:
        await update.message.reply_text(
            "–Ø –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=menu_keyboard(),
        )

# =======================
#  –ù–ê–°–¢–†–û–ô–ö–ê PTB + FASTAPI (WEBHOOK)
# =======================

TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN", "")
PUBLIC_URL = os.environ.get("PUBLIC_URL", "").rstrip("/")
# –ù–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö Render –≤—ã—Å—Ç–∞–≤–ª—è–µ—Ç RENDER_EXTERNAL_URL ‚Äî –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫:
if not PUBLIC_URL:
    PUBLIC_URL = os.environ.get("RENDER_EXTERNAL_URL", "").rstrip("/")

if not TOKEN:
    raise RuntimeError("TELEGRAM_BOT_TOKEN is not set")
if not PUBLIC_URL:
    raise RuntimeError("PUBLIC_URL is not set (–∏–ª–∏ RENDER_EXTERNAL_URL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω). –£–∫–∞–∂–∏ PUBLIC_URL –≤—Ä—É—á–Ω—É—é –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

application = (
    Application.builder()
    .updater(None)      # –º—ã —Å–∞–º–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–µ–±—Ö—É–∫
    .token(TOKEN)
    .build()
)

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
application.add_handler(CommandHandler("start", cmd_start))
application.add_handler(CallbackQueryHandler(on_callback))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_text))
application.add_handler(MessageHandler(~filters.TEXT, on_unknown))

WEBHOOK_PATH = "/webhook"
WEBHOOK_URL = f"{PUBLIC_URL}{WEBHOOK_PATH}"

@asynccontextmanager
async def lifespan(_: FastAPI):
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    await application.bot.setWebhook(WEBHOOK_URL)
    async with application:
        await application.start()
        yield
        await application.stop()

app = FastAPI(lifespan=lifespan)

@app.post(WEBHOOK_PATH)
async def telegram_webhook(req: Request) -> Response:
    data = await req.json()
    update = Update.de_json(data, application.bot)
    # –í–∞–∂–Ω–æ: –±—ã—Å—Ç—Ä–æ –æ—Ç–¥–∞–≤–∞—Ç—å 200. –û–±—Ä–∞–±–æ—Ç–∫–∞ update ‚Äî –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è, –Ω–æ –∑–¥–µ—Å—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ await.
    await application.process_update(update)
    return Response(status_code=HTTPStatus.OK)

@app.get("/healthz")
async def healthz():
    return {"ok": True}

@app.get("/")
async def root():
    return {"service": "kpop-telegram-bot", "ok": True}

@app.get("/set_webhook")
async def set_webhook():
    ok = await application.bot.setWebhook(WEBHOOK_URL)
    return {"set_webhook": ok, "url": WEBHOOK_URL}
